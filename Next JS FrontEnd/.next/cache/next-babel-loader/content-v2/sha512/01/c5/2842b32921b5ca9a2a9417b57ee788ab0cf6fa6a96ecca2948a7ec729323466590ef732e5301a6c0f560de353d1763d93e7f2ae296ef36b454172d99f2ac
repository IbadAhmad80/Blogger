{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni Work\\\\Semester 6\\\\Web Development\\\\blogging-website\\\\next-frontend\\\\blogging-app\\\\pages\\\\posts\\\\[id].js\";\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { server } from \"../../config/index\";\nexport default function SinlgePost({\n  allBlogs,\n  blog,\n  author,\n  category\n}) {\n  const router = useRouter;\n  const {\n    0: queryData,\n    1: setQueryData\n  } = useState({\n    blog: blog,\n    sameAuthor: author,\n    allBlogs: allBlogs,\n    sameCategory: category\n  });\n  console.log(queryData, router().query.id);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"Title of the Blog is \", queryData.blog.title, \" and its author is\", \" \", queryData.blog.author, \" and its category is \", queryData.blog.category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), queryData.allBlogs.map(blog => {\n      /*#__PURE__*/\n      _jsxDEV(\"h5\", {\n        children: [blog.title, \" is from \", blog.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"From same Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), queryData.sameCategory.map(blog => {\n      /*#__PURE__*/\n      _jsxDEV(\"h5\", {\n        children: [blog.title, \" is from \", blog.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"From same Athor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), queryData.sameAuthor && queryData.sameAuthor.map(blog => {\n      /*#__PURE__*/\n      _jsxDEV(\"h5\", {\n        children: [blog.title, \" is from \", blog.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true);\n}\nexport const getStaticProps = async context => {\n  const res = await fetch(`${server}/posts/`);\n  console.log(\"context was\", context);\n  const allBlogs = await res.json();\n  let blog = allBlogs.filter(blog => blog.id === context.params.id);\n  let author = allBlogs.filter(article => article.author === blog.author); // let category = allBlogs.filter(\n  //   (article) => article.category[0].name === blog.category[0].name\n  // );\n\n  return {\n    revalidate: 5,\n    props: {\n      allBlogs,\n      blog,\n      author // category,\n\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`${server}/posts/`);\n  const allBlogs = await res.json();\n  const ids = allBlogs.map(blog => blog.id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};","map":{"version":3,"sources":["D:/Uni Work/Semester 6/Web Development/blogging-website/next-frontend/blogging-app/pages/posts/[id].js"],"names":["React","useState","useRouter","server","SinlgePost","allBlogs","blog","author","category","router","queryData","setQueryData","sameAuthor","sameCategory","console","log","query","id","title","map","getStaticProps","context","res","fetch","json","filter","params","article","revalidate","props","getStaticPaths","ids","paths","toString","fallback"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { server } from \"../../config/index\";\r\n\r\nexport default function SinlgePost({ allBlogs, blog, author, category }) {\r\n  const router = useRouter;\r\n  const [queryData, setQueryData] = useState({\r\n    blog: blog,\r\n    sameAuthor: author,\r\n    allBlogs: allBlogs,\r\n    sameCategory: category,\r\n  });\r\n\r\n  console.log(queryData, router().query.id);\r\n  return (\r\n    <>\r\n      <h5>\r\n        Title of the Blog is {queryData.blog.title} and its author is{\" \"}\r\n        {queryData.blog.author} and its category is {queryData.blog.category}\r\n      </h5>\r\n      <h1>All Blogs</h1>\r\n\r\n      {queryData.allBlogs.map((blog) => {\r\n        <h5>\r\n          {blog.title} is from {blog.author}\r\n        </h5>;\r\n      })}\r\n      <h1>From same Category</h1>\r\n\r\n      {queryData.sameCategory.map((blog) => {\r\n        <h5>\r\n          {blog.title} is from {blog.author}\r\n        </h5>;\r\n      })}\r\n\r\n      <h1>From same Athor</h1>\r\n      {queryData.sameAuthor &&\r\n        queryData.sameAuthor.map((blog) => {\r\n          <h5>\r\n            {blog.title} is from {blog.author}\r\n          </h5>;\r\n        })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getStaticProps = async (context) => {\r\n  const res = await fetch(`${server}/posts/`);\r\n  console.log(\"context was\", context);\r\n  const allBlogs = await res.json();\r\n  let blog = allBlogs.filter((blog) => blog.id === context.params.id);\r\n  let author = allBlogs.filter((article) => article.author === blog.author);\r\n  // let category = allBlogs.filter(\r\n  //   (article) => article.category[0].name === blog.category[0].name\r\n  // );\r\n\r\n  return {\r\n    revalidate: 5,\r\n    props: {\r\n      allBlogs,\r\n      blog,\r\n      author,\r\n      // category,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getStaticPaths = async () => {\r\n  const res = await fetch(`${server}/posts/`);\r\n  const allBlogs = await res.json();\r\n  const ids = allBlogs.map((blog) => blog.id);\r\n  const paths = ids.map((id) => ({\r\n    params: {\r\n      id: id.toString(),\r\n    },\r\n  }));\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}