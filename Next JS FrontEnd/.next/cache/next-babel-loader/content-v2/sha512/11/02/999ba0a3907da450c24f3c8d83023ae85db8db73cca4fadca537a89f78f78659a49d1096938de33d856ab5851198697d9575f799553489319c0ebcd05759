{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni Work\\\\Semester 6\\\\Web Development\\\\blogging-website\\\\next-frontend\\\\blogging-app\\\\pages\\\\create_post.js\";\nimport React from \"react\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nimport { server } from \"../config/index\";\nimport * as cookie from \"cookie\";\nimport StripeGateway from \"../components/CreatePost/StrapiGateway\";\nexport default function CreatePost({\n  user\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: Cookie.get(\"token\") ? \"You are already signed in\" : \"Sign in First\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), role ? role.name === \"Public\" ? /*#__PURE__*/_jsxDEV(StripeGateway, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this) : \"You are already authorized\" : \"\"]\n  }, void 0, true);\n}\nexport const getServerSideProps = async context => {\n  const parsedCookie = context.req.headers.cookie && cookie.parse(context.req.headers.cookie);\n  let user = parsedCookie && parsedCookie.token && (await axios.get(`${server}/users/me`, {\n    headers: {\n      Authorization: `Bearer ${parsedCookie.token}`\n    }\n  }));\n  return {\n    props: {\n      user: parsedCookie ? user.data : \"\"\n    }\n  };\n};","map":{"version":3,"sources":["D:/Uni Work/Semester 6/Web Development/blogging-website/next-frontend/blogging-app/pages/create_post.js"],"names":["React","Cookie","axios","server","cookie","StripeGateway","CreatePost","user","get","role","name","getServerSideProps","context","parsedCookie","req","headers","parse","token","Authorization","props","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAC3C,sBACE;AAAA,4BACE;AAAA,gBACGN,MAAM,CAACO,GAAP,CAAW,OAAX,IAAsB,2BAAtB,GAAoD;AADvD;AAAA;AAAA;AAAA;AAAA,YADF,EAIGC,IAAI,GACHA,IAAI,CAACC,IAAL,KAAc,QAAd,gBACE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEH;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,GAGE,4BAJC,GAOH,EAXJ;AAAA,kBADF;AAgBD;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AACnD,QAAMC,YAAY,GAChBD,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBX,MAApB,IAA8BA,MAAM,CAACY,KAAP,CAAaJ,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBX,MAAjC,CADhC;AAGA,MAAIG,IAAI,GACNM,YAAY,IACZA,YAAY,CAACI,KADb,KAEC,MAAMf,KAAK,CAACM,GAAN,CAAW,GAAEL,MAAO,WAApB,EAAgC;AACrCY,IAAAA,OAAO,EAAE;AACPG,MAAAA,aAAa,EAAG,UAASL,YAAY,CAACI,KAAM;AADrC;AAD4B,GAAhC,CAFP,CADF;AAQA,SAAO;AACLE,IAAAA,KAAK,EAAE;AACLZ,MAAAA,IAAI,EAAEM,YAAY,GAAGN,IAAI,CAACa,IAAR,GAAe;AAD5B;AADF,GAAP;AAKD,CAjBM","sourcesContent":["import React from \"react\";\r\nimport Cookie from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport { server } from \"../config/index\";\r\nimport * as cookie from \"cookie\";\r\nimport StripeGateway from \"../components/CreatePost/StrapiGateway\";\r\n\r\nexport default function CreatePost({ user }) {\r\n  return (\r\n    <>\r\n      <div>\r\n        {Cookie.get(\"token\") ? \"You are already signed in\" : \"Sign in First\"}\r\n      </div>\r\n      {role ? (\r\n        role.name === \"Public\" ? (\r\n          <StripeGateway user={user} />\r\n        ) : (\r\n          \"You are already authorized\"\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = async (context) => {\r\n  const parsedCookie =\r\n    context.req.headers.cookie && cookie.parse(context.req.headers.cookie);\r\n\r\n  let user =\r\n    parsedCookie &&\r\n    parsedCookie.token &&\r\n    (await axios.get(`${server}/users/me`, {\r\n      headers: {\r\n        Authorization: `Bearer ${parsedCookie.token}`,\r\n      },\r\n    }));\r\n  return {\r\n    props: {\r\n      user: parsedCookie ? user.data : \"\",\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}